// Generated by CoffeeScript 1.3.3
(function() {
  var check_selected, checked, cleanScope, cleanSearch, cleanSelect, confirmCopy, confirmScope, contabid, current_table, dealBig, dealChecked, dealEd2k, dealMagnet, magnet_regex, result, scanColor, selectAll, selectOpposite, selectedIDS, table_append_tr, toggle_check, types, wrap_tr;

  contabid = 0;

  types = ["ed2k", "magnet"];

  result = [];

  selectedIDS = {};

  magnet_regex = /magnet\:\?[^\"]+/ig;

  window.ed2k_bitch = {};

  window.magnet_bitch = {};

  $(document).ready(function() {
    var data_map, prefix, that, _i, _len;
    result = chrome.extension.getBackgroundPage().result;
    console.log("result:", result);
    window.ed2k_bitch = this.ed2k_result = dealEd2k(result.ed2k_result);
    window.magnet_bitch = this.magnet_result = dealMagnet(result.magnet_result);
    console.log(this.ed2k_result, this.magnet_result);
    that = this;
    for (_i = 0, _len = types.length; _i < _len; _i++) {
      prefix = types[_i];
      table_append_tr($("#" + prefix + "_table"), this["" + prefix + "_result"]);
    }
    $("span[i18n]").each(function() {
      return $(this).html(chrome.i18n.getMessage($(this).attr('i18n')));
    });
    $("input[i18n]").each(function() {
      return $(this).val(chrome.i18n.getMessage($(this).attr('i18n')));
    });
    data_map = {
      "confirmScope": confirmScope,
      "cleanSearch": cleanSearch,
      "cleanScope": cleanScope,
      "selectAll": selectAll,
      "selectOpposite": selectOpposite,
      "cleanSelect": cleanSelect,
      "confirmCopy": confirmCopy
    };
    $("input[data-map]").live("click", function() {
      data_map[$(this).attr("data-map")]();
    });
    $("#searchText").live("keyup", function() {
      var key, r, st, table, templinkobj, temptrtd, type;
      table = current_table();
      type = table.data("type");
      result = that["" + type + "_result"];
      check_selected();
      st = $(this).val();
      templinkobj = {};
      for (key in result) {
        r = result[key];
        if (key.toLocaleLowerCase().indexOf(st.toLocaleLowerCase()) > -1) {
          templinkobj[key] = r;
        }
      }
      temptrtd = wrap_tr(templinkobj);
      table.find("tbody").remove();
      table.append(temptrtd);
      return check_selected();
    }).attr("placeholder", chrome.i18n.getMessage("search_placeholder"));
    $("table").delegate("td[ee]", "click", function() {
      dealChecked($(this));
      return scanColor();
    }).delegate("tr", "mouseenter", function() {
      $(this).css("cursor", "pointer");
      return $(this).addClass("selected_tr");
    }).delegate("tr", "mouseout", function() {
      var cb;
      cb = $(this).find("input[type='checkbox']");
      if (!checked(cb)) {
        return $(this).removeClass("selected_tr");
      }
    });
    console.log("resulted2kl:", result.ed2k_result.length);
    console.log("resultedmgl:", result.magnet_result.length);
    if (result.ed2k_result.length === 0 && result.magnet_result.length > 0) {
      console.log("should click!");
      return $("#switch_ul a[href='#magnet_links']").click();
    }
  });

  dealEd2k = function(linkarr) {
    var count, link, name, re, regex2, tmp, _i, _len;
    if (linkarr == null) {
      linkarr = [];
    }
    re = {};
    count = 0;
    for (_i = 0, _len = linkarr.length; _i < _len; _i++) {
      link = linkarr[_i];
      regex2 = /ed2k:\/\/\|file\|(.+?)\|(.+?)\|.+?\//ig;
      tmp = regex2.exec(link);
      if (!tmp) {
        continue;
      }
      name = decodeURI(tmp[1]);
      if (re[name] != null) {
        continue;
      }
      count++;
      re[name] = {
        id: count,
        link: tmp[0],
        big: tmp[2] / (1024 * 1024)
      };
    }
    $("#ed2k_table").data("maxid", count);
    return re;
  };

  dealMagnet = function(linkarr) {
    var count, link, name, name_regex, re, size, size_regex, _i, _len;
    if (linkarr == null) {
      linkarr = [];
    }
    re = {};
    count = 0;
    for (_i = 0, _len = linkarr.length; _i < _len; _i++) {
      link = linkarr[_i].link;
      name_regex = /dn=(.+?)&/;
      size_regex = /xl=(.+?)&/;
      try {
        name = name_regex.exec(link)[1];
      } catch (error) {
        name = linkarr[_i].name;
      }
      if (!name) {
        continue;
      }
      try {
        size = size_regex.exec(link)[1];
      } catch (error) {
        size = 0;
      }
      name = decodeURI(name);
      if (re[name] != null) {
        continue;
      }
      count++;
      re[name] = {
        id: count,
        link: link,
        big: size / (1024 * 1024)
      };
    }
    $("#magnet_table").data("maxid", count);
    return re;
  };

  table_append_tr = function(table, result) {
    console.log("table:", table);
    console.log("result", result);
    return table.append(wrap_tr(result));
  };

  wrap_tr = function(linkobj) {
    var key, obj, tr, trtd;
    trtd = $("<tbody></tobdy>");
    for (key in linkobj) {
      obj = linkobj[key];
      tr = $("<tr id=\"tr_" + obj.id + "\"></tr>");
      tr.append("<td><input type=\"checkbox\" id=\"cb_" + obj.id + "\" ed2k=\"" + obj.link + "\" /></td>");
      tr.append("<td ee=\"ee\">" + obj.id + "</td>");
      tr.append("<td ee=\"ee\" style=\"max-width:470px;overflow-x:hidden;word-brek:keep-all;\">" + key + "</td>");
      tr.append("<td ee=\"ee\">" + (dealBig(obj.big)) + "</td>");
      trtd.append(tr);
    }
    return trtd;
  };

  dealBig = function(num) {
    var numstr;
    if (num === 0) {
      return "no size data";
    }
    num = num.toFixed(3);
    numstr = "";
    if (num < 1) {
      numstr = "" + (num * 1000) + "KB";
    } else if (num >= 1 && num < 10) {
      numstr = "" + (Math.round(num * 10) / 10) + "MB";
    } else {
      numstr = "" + (Math.floor(num)) + "MB";
    }
    return numstr;
  };

  check_selected = function() {
    return current_table().find("input[type='checkbox']").each(function() {
      var id, key, selected_id, temp, _results;
      if (checked($(this))) {
        id = $(this).attr("id");
        id = id.substring(3, id.length);
        selectedIDS[id] = 0;
      }
      _results = [];
      for (key in selectedIDS) {
        selected_id = selectedIDS[key];
        temp = $("#cb_" + key);
        if (temp != null) {
          _results.push(temp.prop("checked", true));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  dealChecked = function(td) {
    var cb;
    cb = td.siblings("td").find("input[type='checkbox']");
    return toggle_check(cb);
  };

  scanColor = function() {
    return $("tr").each(function() {
      var cb;
      cb = $(this).find("input[type='checkbox']");
      if (checked(cb)) {
        return $(this).addClass("selected_tr");
      } else {
        return $(this).removeClass("selected_tr");
      }
    });
  };

  confirmScope = function() {
    var from, i, maxid, reg, to, _i;
    maxid = parseInt(current_table().data("maxid"));
    from = Math.floor($("#from").val());
    to = Math.floor($("#to").val());
    reg = /\d+/;
    if (!(reg.test(from) && reg.test(to)) || (from <= 0 || to <= 0) || from > to) {
      alert("范围输入有问题，请输入正确数字");
      return false;
    }
    if (to > maxid) {
      alert("最大范围超出有效选项数，请输入正确数字");
      return false;
    }
    for (i = _i = from; from <= to ? _i <= to : _i >= to; i = from <= to ? ++_i : --_i) {
      selectedIDS[i] = 0;
    }
    check_selected();
    scanColor();
    return true;
  };

  cleanScope = function() {
    $("#from").val("");
    $("#to").val("");
    return cleanSelect();
  };

  selectAll = function() {
    var table;
    table = current_table();
    table.find("input[type='checkbox']").each(function() {
      return $(this).prop('checked', true);
    });
    return scanColor();
  };

  selectOpposite = function() {
    var table;
    table = current_table();
    table.find("input[type='checkbox']").each(function() {
      return toggle_check($(this));
    });
    return scanColor();
  };

  cleanSearch = function(result) {
    var table, type;
    if (result == null) {
      result = {};
    }
    table = current_table();
    type = table.data("type");
    check_selected();
    $("#searchText").val("");
    table.find("tbody").remove();
    table_append_tr(table, window["" + type + "_bitch"]);
    return scanColor();
  };

  cleanSelect = function() {
    var table;
    table = current_table();
    $("input[type='checkbox']").each(function() {
      if ($(this).prop('checked')) {
        return $(this).prop("checked", false);
      }
    });
    scanColor();
    return selectedIDS = {};
  };

  confirmCopy = function() {
    var count, cpresult, table, textarea;
    cpresult = "";
    count = 0;
    table = current_table();
    table.find("input[type='checkbox']").each(function() {
      if ($(this).prop("checked")) {
        cpresult += "" + ($(this).attr("ed2k")) + "\n";
        return count++;
      }
    });
    if (count === 0) {
      alert(chrome.i18n.getMessage("error_unselected"));
      return false;
    }
    JClipboard.copy(cpresult);
    textarea = $("<textarea></textarea>");
    textarea.val(cpresult);
    $("#copy").empty().append("<span style='color:#08c;' i18n=\"copy_success\">" + (chrome.i18n.getMessage("copy_success")) + "</span>").append(textarea);
    $("a[href='#copy']").tab("show");
    $("#copy textarea").height($("#links").height()).focus().select();
    return true;
  };

  checked = function(element) {
    return element.prop("checked");
  };

  toggle_check = function(checkbox) {
    if (checked(checkbox)) {
      return checkbox.prop("checked", false);
    } else {
      return checkbox.prop("checked", true);
    }
  };

  current_table = function() {
    return $("#" + $("#switch_ul>li.active a").data("type") + "_table");
  };

}).call(this);
